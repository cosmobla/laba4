'''Модуль для 1 задания(быстрая сортировка)'''
def q(a):
        b = a[1]
        h = []
        m = []
        l = []
        for i in a:
            if i < b:
                h.append(i)
            elif i>b:
                m.append(i)
            else:
                l.append(i)
        return q(h) + e + q(m)
       
''' Модуль для 1 задания(расческой)'''
def r(m):
    f = len(m)
    d = True
    while f > 1 or d:
        f = max(1, int(f / 1.27))
        d = False
        for i in range(len(m) - f):
            w = i + f
            if m[i] > m[w]:
                m[i], m[w] = m[w], m[w]
                d = True
    return m
    
    ''' 1 задание '''
import timeit
import fastsort
a = list(map(int,input('Введите массив:'). split()))
e = fastsort.q(a)
print(e)

t =timeit.timeit()
print('Времz^ ', endtime)


import sortr
a = list(map(int,input('Введите массив:'). split()))
f = sortr.r(a)
print(f)

tt = timeit.timeit()
print(tt)

''' Задание 2, блочная'''

def insertion_sort(array):
            for i in range(1, len(array)):
                key = array[i]
                j = i-1
                while array[j] > key and j >= 0:
                    array[j+1] = array[j]
                    j -= 1
                array[j+1] = key
            return array

def sort(n):
    max_value = max(n)
    size = max_value/len(n)

    buckets_list= []
    for x in range(len(n)):
        buckets_list.append([]) 

    for i in range(len(n)):
        j = int (n[i] / size)
        if j != len (n):
            buckets_list[j].append(n[i])
        else:
            buckets_list[len(n) - 1].append(n[i])

    for z in range(len(n)):
        insertion_sort(n)
            
    final_output = []
    for x in range(len (n)):
        final_output = final_output + buckets_list[x]
    return final_output
    
  ''' 2 задание(пирамидальная) '''
  
def heapsort(list):
    build_max_heap(list)
    for index in range(len(list) - 1, 0, -1):
        list[0], list[index] = list[index], list[0]
        max_heapify(list, index=0, size=index)
def parent(index):
    return (index - 1) // 2
def left(index):
    return 2 * index + 1
def right(index):
    return 2 * index + 2

def build_max_heap(list):
    length = len(list)
    start = parent(length - 1)
    while start >= 0:
        max_heapify(list, index=start, size=length)
        start = start - 1

def max_heapify(list, index, size):
    l = left(index)
    r = right(index)
    if (l < size and list[l] > list[index]):
        largest = l
    else:
        largest = index
    if (r < size and list[r] > list[largest]):
        largest = r
    if (largest != index):
        list[largest], list[index] = list[index], list[largest]
        max_heapify(list, largest, size)


list = input('Введите числа: ').split()
list = [int(x) for x in list]
heapsort(list)
print('Отсортированные числа: ', end='')
print(list)
  
